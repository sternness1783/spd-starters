;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname spider) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/universe)
(require 2htdp/image)

;; Space Invaders


;; Constants:

(define WIDTH  300)
(define HEIGHT 500)

(define INVADER-X-SPEED 1.5)  ;speeds (not velocities) in pixels per tick
(define INVADER-Y-SPEED 1.5)
(define TANK-SPEED 2)
(define MISSILE-SPEED 10)

(define HIT-RANGE 10)

(define INVADE-RATE 100)

(define BACKGROUND (empty-scene WIDTH HEIGHT))

(define INVADER
  (overlay/xy (ellipse 10 15 "outline" "blue")              ;cockpit cover
              -5 6
              (ellipse 20 10 "solid"   "blue")))            ;saucer

(define TANK
  (overlay/xy (overlay (ellipse 28 8 "solid" "black")       ;tread center
                       (ellipse 30 10 "solid" "green"))     ;tread outline
              5 -14
              (above (rectangle 5 10 "solid" "black")       ;gun
                     (rectangle 20 10 "solid" "black"))))   ;main body

(define TANK-HEIGHT/2 (/ (image-height TANK) 2))

(define MISSILE (ellipse 5 15 "solid" "red"))



;; Data Definitions:

(define-struct game (invaders missiles tank))
;; Game is (make-game  (listof Invader) (listof Missile) Tank)
;; interp. the current state of a space invaders game
;;         with the current invaders, missiles and tank position

;; Game constants defined below Missile data definition

#;
(define (fn-for-game s)
  (... (fn-for-loinvader (game-invaders s))
       (fn-for-lom (game-missiles s))
       (fn-for-tank (game-tank s))))


(define-struct tank (x dir))
;; Tank is (make-tank Number Integer[-1, 1])
;; interp. the tank location is x, HEIGHT - TANK-HEIGHT/2 in screen coordinates
;;         the tank moves TANK-SPEED pixels per clock tick left if dir -1, right if dir 1

(define T0 (make-tank (/ WIDTH 2) 1))   ;center going right
(define T1 (make-tank 50 1))            ;going right
(define T2 (make-tank 50 -1))           ;going left

#;
(define (fn-for-tank t)
  (... (tank-x t) (tank-dir t)))


(define-struct invader (x y dx))
;; Invader is (make-invader Number Number Number)
;; interp. the invader is at (x, y) in screen coordinates
;;         the invader along x by dx pixels per clock tick

(define I1 (make-invader 150 100 12))           ;not landed, moving right
(define I2 (make-invader 150 HEIGHT -10))       ;exactly landed, moving left
(define I3 (make-invader 150 (+ HEIGHT 10) 10)) ;> landed, moving right


#;
(define (fn-for-invader invader)
  (... (invader-x invader) (invader-y invader) (invader-dx invader)))


(define-struct missile (x y))
;; Missile is (make-missile Number Number)
;; interp. the missile's location is x y in screen coordinates

(define M1 (make-missile 150 300))                       ;not hit I1
(define M2 (make-missile (invader-x I1) (+ (invader-y I1) 10)))  ;exactly hit I1
(define M3 (make-missile (invader-x I1) (+ (invader-y I1)  5)))  ;> hit I1

#;
(define (fn-for-missile m)
  (... (missile-x m) (missile-y m)))



(define G0 (make-game empty empty T0))
(define G1 (make-game empty empty T1))
(define G2 (make-game (list I1) (list M1) T1))
(define G3 (make-game (list I1 I2) (list M1 M2) T1))


;; =================
;; Functions:

;; Game -> Game
;; start the world with (main (make-game empty empty (make-tank 50 1)))
(define (main game)
  (big-bang game                   ; Game
    (on-tick   next-game)     ; Game -> Game
    (to-draw   render-game)   ; Game -> Image
    (stop-when stop-game)      ; Game -> Boolean
    (on-key    handle-key)))    ; Game KeyEvent -> Game

;; Game -> Game
;; produce the next game
(check-expect (next-game G0)
              (make-game (next-invader (game-invaders G0))
                         (next-missile (game-missiles G0))
                         (next-tank (game-tank G0))))

(check-expect (next-game G1)
              (make-game (next-invader (game-invaders G1))
                         (next-missile (game-missiles G1))
                         (next-tank (game-tank G1))))

; (define (next-game game) game) ; stub

(define (next-game game)
  (make-game (next-invader (game-invaders game))
             (next-missile (game-missiles game))
             (next-tank (game-tank game))))


;; ListOfInvader -> ListOfInvader
;; produce next invader
(check-expect (next-invader (cons (make-invader 30 50 5) empty))
              (cons (make-invader 35 (+ INVADER-Y-SPEED 50) 5) empty))
(check-expect (next-invader (cons (make-invader 30 50 -5) empty))
              (cons (make-invader 25 (+ INVADER-Y-SPEED 50) -5) empty))
(check-expect (next-invader (cons (make-invader 0 50 -5) empty))
              (cons (make-invader 0 (+ INVADER-Y-SPEED 50) 5) empty))
(check-expect (next-invader (cons (make-invader WIDTH 50 5) empty))
              (cons (make-invader WIDTH (+ INVADER-Y-SPEED 50) -5) empty))

; (define (next-invader loi) empty) ; stub

(define (next-invader loi)
  (cond [(empty? loi) empty]
        [else
         (cond [(>= (+ (invader-x (first loi)) (invader-dx (first loi))) WIDTH)
                (cons (make-invader WIDTH (+ (invader-y (first loi)) INVADER-Y-SPEED) (- (invader-dx (first loi)))) (rest loi))]
               [(< (+ (invader-x (first loi)) (invader-dx (first loi))) 0)
                (cons (make-invader 0 (+ (invader-y (first loi)) INVADER-Y-SPEED) (- (invader-dx (first loi)))) (rest loi))]
               [else
                (cons (make-invader (+ (invader-x (first loi)) (invader-dx (first loi))) (+ (invader-y (first loi)) INVADER-Y-SPEED) (invader-dx (first loi))) (rest loi))])]))


;; ListOfMissile -> ListOfMissile
;; produce next missile
(check-expect (next-missile (cons (make-missile 150 200) empty))
              (cons (make-missile 150 (- 200 MISSILE-SPEED)) empty))

; (define (next-missile lom) empty) ; stub

(define (next-missile lom)
  (cond [(empty? lom) empty]
        [else
         (cons (make-missile
                (missile-x (first lom))
                (- (missile-y (first lom)) MISSILE-SPEED))
               (next-missile (rest lom)))]))


;; Tank -> Tank
;; produce next tank
(check-expect (next-tank (make-tank 30 1)) (make-tank (+ 30 (* TANK-SPEED 1)) 1))
(check-expect (next-tank (make-tank 30 -1)) (make-tank (+ 30 (* TANK-SPEED -1)) -1))

; (define (next-tank tank) T0) ; stub

(define (next-tank tank)
  (cond [(and (<= (tank-x tank) 0) (= (tank-dir tank) -1)) tank]
        [(and (>= (tank-x tank) WIDTH) (= (tank-dir tank) 1)) tank]
        [else
         (make-tank (+ (tank-x tank) (* TANK-SPEED (tank-dir tank))) (tank-dir tank))]))
  

;; Game -> Image
;; render game
;; !!!

; (define (render-game game) BACKGROUND) ; stub

(define (render-game game)
  (render-invaders (game-invaders game) (render-missiles (game-missiles game) (render-tank (game-tank game) BACKGROUND))))


;; ListOfInvader -> Image
;; produce image of invader of list
;; !!!

; (define (render-invaders loi img) BACKGROUND); stub

(define (render-invaders loi img)
  (cond [(empty? loi) img]
        [else
         (place-image
          INVADER
          (invader-x (first loi))
          (invader-y (first loi))
          (render-invaders (rest loi) img))]))


;; ListOfMissile -> Image
;; produce image of missile of list
; (define (render-missiles lom img) BACKGROUND); stub

(define (render-missiles lom img)
  (cond [(empty? lom) img]
        [else
         (place-image
          MISSILE
          (missile-x (first lom))
          (missile-y (first lom))
          (render-missiles (rest lom) img))]))


;; Tank -> Image
;; produce image of tank
(check-expect (render-tank (make-tank 50 1) BACKGROUND) (place-image TANK 50 (- HEIGHT TANK-HEIGHT/2) BACKGROUND))

; (define (render-tank tank img) BACKGROUND)

(define (render-tank tank img)
  (place-image TANK (tank-x tank) (- HEIGHT TANK-HEIGHT/2) img))


;; Game -> Boolean
;; true if invader reach bottom
(check-expect (stop-game (make-game (cons (make-invader 150 50 -10) empty) empty T0)) false)
(check-expect (stop-game (make-game (cons (make-invader 150 HEIGHT -10) empty) empty T0)) true)

; (define (stop-game game) empty) ; stub

(define (stop-game game) (reach-invader-bottom? (game-invaders game)))


;; ListOfInvader -> Boolean
;; true if exist reach invader of lists
(check-expect (reach-invader-bottom? (cons (make-invader 150 50 -10) empty)) false)
(check-expect (reach-invader-bottom? (cons (make-invader 150 HEIGHT -10) empty)) true)

; (define (reach-missile-bottom? lom) false) ; stub

(define (reach-invader-bottom? lom)
  (cond [(empty? lom) false]
        [(= (invader-y (first lom)) HEIGHT) true]
        [else (reach-invader-bottom? (rest lom))]))
  

;; Game KeyEvent -> Game
;; handle key
(define (handle-key game ke)
  (cond [(key=? ke " ")
         (make-game
          (game-invaders game)
          (add-missile (game-missiles game) (game-tank game))
          (game-tank game))]
        [(key=? ke "left")
         (make-game
          (game-invaders game)
          (game-missiles game)
          (left-direction (game-tank game)))]
        [(key=? ke "right")
         (make-game
          (game-invaders game)
          (game-missiles game)
          (right-direction (game-tank game)))]
        [else game]))


;; ListOfMissile Tank -> ListOfMissle
;; add missile to list where tank location
(check-expect (add-missile empty (make-tank 50 1)) (cons (make-missile 50 (- HEIGHT TANK-HEIGHT/2)) empty))
(check-expect (add-missile (cons (make-missile 100 30) empty) (make-tank 50 1)) (cons (make-missile 50 (- HEIGHT TANK-HEIGHT/2)) (cons (make-missile 100 30) empty)))

; (define (add-missile lom tank) empty) ; stub

(define (add-missile lom tank)
  (cons (make-missile (tank-x tank) (- HEIGHT TANK-HEIGHT/2)) lom))


;; Tank -> Tank
;; change tank direction to left
(check-expect (left-direction (make-tank 30 1)) (make-tank 30 -1))
(check-expect (left-direction (make-tank 30 -1)) (make-tank 30 -1))

; (define (left-direction tank) T0) ; stub

(define (left-direction tank)
  (make-tank (tank-x tank) -1))


;; Tank -> Tank
;; change tank direction to right
(check-expect (right-direction (make-tank 30 1)) (make-tank 30 1))
(check-expect (right-direction (make-tank 30 -1)) (make-tank 30 1))

; (define (right-direction tank) T0) ; stub

(define (right-direction tank)
  (make-tank (tank-x tank) 1))
